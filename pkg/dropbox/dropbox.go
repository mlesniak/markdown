package dropbox

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/labstack/echo/v4"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

// Service contains the necessary data to access a dropbox.
type Service struct {
	token         string
	rootDirectory string
}

// New returns a new dropbox service.
//
// The token is either generated by the normal OAuth2 workflow from
// dropbox or a token manually generated using the app console for your
// specific application.
//
// The rootDirectory is the root for all accessed files.
func New(token string, rootDirectory string) *Service {
	if !strings.HasSuffix(rootDirectory, "/") {
		rootDirectory = rootDirectory + "/"
	}

	return &Service{
		token:         token,
		rootDirectory: rootDirectory,
	}
}

// Read downloads the requested file from dropbox.
//
// I'm still not happy that the echo logger interface is polluting our
// dropbox service instead of a more general (log) or custom (zerolog)
// interface. Of course, I could write a wrapper back from lecho to
// zerolog, but this is a lot of work for this small program, hence ü§∑‚Äç.
// Although I miss zerlog's context, e.g. for filenames.
func (s *Service) Read(log echo.Logger, filename string) ([]byte, error) {
	start := time.Now()

	argument := struct {
		Path string `json:"path"`
	}{
		Path: "/" + s.rootDirectory + filename,
	}
	bs, err := s.ApiCallHeader(log, "https://content.dropboxapi.com/2/files/download", argument)
	if err != nil {
		return nil, err
	}

	log.Infof("Read file from dropbox. filename=%s, duration=%v", filename, time.Since(start).Milliseconds())
	return bs, err
}

// ApiCallHeader generalizes different api calls to dropbox.
//
// Will later be non-public again after Refactoring.
func (s *Service) ApiCallHeader(log echo.Logger, url string, argument interface{}) ([]byte, error) {
	// Create general request.
	client := http.Client{}
	request, err := http.NewRequest("POST", url, nil)
	if err != nil {
		return nil, fmt.Errorf("unable to create request: %s", err)
	}

	// Create payload.
	rawJson, err := json.Marshal(argument)
	if err != nil {
		return nil, fmt.Errorf("unable to create payload: %s", err)
	}

	// Set token and payload for submitting.
	request.Header.Add("Authorization", "Bearer "+s.token)
	request.Header.Add("Dropbox-API-Arg", string(rawJson))

	// Execute request.
	log.Infof("Performing dropbox API call to %s with payload=%v", url, argument)
	resp, err := client.Do(request)
	if err != nil {
		return nil, fmt.Errorf("unable to perform request: %s", err)
	}
	defer resp.Body.Close()

	// Read response.
	bs, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("unable to read data from response: %s", err)
	}
	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("non 200 response from dropbox: `%s`", string(bs))
	}

	// Return data and log elapsed time.
	return bs, err
}

// Consistency is not dropbox's strength, although I understand the idea behind this :-/
func (s *Service) ApiCallBody(log echo.Logger, url string, argument interface{}) ([]byte, error) {
	// Create payload.
	rawJson, err := json.Marshal(argument)
	if err != nil {
		return nil, fmt.Errorf("unable to create payload: %s", err)
	}
	reader := bytes.NewReader(rawJson)

	// Create general request.
	client := http.Client{}
	request, err := http.NewRequest("POST", url, reader)
	if err != nil {
		return nil, fmt.Errorf("unable to create request: %s", err)
	}

	// Set token and payload for submitting.
	request.Header.Add("Authorization", "Bearer "+s.token)
	request.Header.Set("Content-Type", "application/json")

	// Execute request.
	log.Infof("Performing dropbox API call to %s with payload=%v", url, string(rawJson))
	resp, err := client.Do(request)
	if err != nil {
		return nil, fmt.Errorf("unable to perform request: %s", err)
	}
	defer resp.Body.Close()

	// Read response.
	bs, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("unable to read data from response: %s", err)
	}
	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("non 200 response from dropbox: `%s`", string(bs))
	}

	// Return data and log elapsed time.
	return bs, err
}

// -----------------------------------------------------------------------------------

func HandleChallenge(c echo.Context) error {
	challenge := c.Request().FormValue("challenge")
	// Initial dropbox challenge to register webhook.
	header := c.Response().Header()
	header.Add("Content-Type", "text/plain")
	header.Add("X-Content-Type-Options", "nosniff")
	return c.String(http.StatusOK, challenge)
}
