package dropbox

import (
	"fmt"
	"io/ioutil"
	"net/http"
)

type Service struct {
	token string
}

// New returns a new dropbox service.
//
// The token is either generated by the normal OAuth2 workflow from
// dropbox or a token manually generated using the app console for your
// specific application.
func New(token string) *Service {
	return &Service{token: token}
}

// Read downloads the requested file from dropbox.
func (s *Service) Read(filename string) ([]byte, error) {
	// Create request.
	client := http.Client{}
	request, err := http.NewRequest("POST", "https://content.dropboxapi.com/2/files/download", nil)
	if err != nil {
		return nil, fmt.Errorf("unable to create request: %s", err)
	}
	argument := fmt.Sprintf(`{"path": "/notes/%s"}`, filename)
	request.Header.Add("Authorization", "Bearer "+s.token)
	request.Header.Add("Dropbox-API-Arg", argument)

	// Execute request.
	resp, err := client.Do(request)
	if err != nil {
		return nil, fmt.Errorf("unable to perform request: %s", err)
	}
	defer resp.Body.Close()

	// Read file content.
	bs, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("unable to read data from response: %s", err)
	}
	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error reading file: %s", err)
	}

	return bs, err
}
